import streamlit as st
import numpy as np
from PIL import Image
import tensorflow as tf

# Set page layout
st.set_page_config(page_title="ЁЯМ╛ AI Farmer Helper", layout="centered")

# Title
st.title("ЁЯМ┐ Plant Disease Detection")

# Load TFLite model
@st.cache_resource
def load_tflite_model():
    interpreter = tf.lite.Interpreter(model_path="plant_disease_model.tflite")
    interpreter.allocate_tensors()
    return interpreter

interpreter = load_tflite_model()

# Get input/output details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Class labels (change if your model has different classes)
class_labels = ['Pepper___Bacterial_spot', 'Tomato___Healthy', 'Tomato___Late_blight']

# Medicine dictionary
medicine_dict = {
    "Pepper___Bacterial_spot": "рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ рдХреЗ рд▓рд┐рдП рдХреЙрдкрд░ рдЖрдзрд╛рд░рд┐рдд рдлрдлреВрдВрджрдирд╛рд╢рдХ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред",
    "Tomato___Healthy": "рдкреМрдзрд╛ рд╕реНрд╡рд╕реНрде рд╣реИ, рдХреЛрдИ рджрд╡рд╛ рдЖрд╡рд╢реНрдпрдХ рдирд╣реАрдВ рд╣реИред",
    "Tomato___Late_blight": "рд▓реЗрдЯ рдмреНрд▓рд╛рдЗрдЯ рдХреЗ рд▓рд┐рдП рдореЗрдЯрд╛рд▓реЗрдХреНрд╕рд┐рд▓ рдпреБрдХреНрдд рдлрдлреВрдВрджрдирд╛рд╢рдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"
}

# Upload image
uploaded_file = st.file_uploader("ЁЯЦ╝я╕П рдкрддреНрддреЗ рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    try:
        # Preprocess image
        img = Image.open(uploaded_file).convert("RGB")
        img = img.resize((128, 128))  # Make sure this matches model's input
        img_array = np.expand_dims(np.array(img) / 255.0, axis=0).astype(np.float32)

        # Run prediction
        interpreter.set_tensor(input_details[0]['index'], img_array)
        interpreter.invoke()
        prediction = interpreter.get_tensor(output_details[0]['index'])

        predicted_class = class_labels[np.argmax(prediction)]
        confidence = float(np.max(prediction))

        # Show results
        st.success(f"ЁЯФН рдкрд╣рдЪрд╛рдиреА рдЧрдИ рдмреАрдорд╛рд░реА: **{predicted_class}**")
        st.info(f"ЁЯТК рд╕реБрдЭрд╛рд╡рд┐рдд рджрд╡рд╛: {medicine_dict.get(predicted_class, 'рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред')}")
        st.progress(confidence)

    except Exception as e:
        st.error("тЭМ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдореЗрдВ рддреНрд░реБрдЯрд┐ рдЖрдИред рдХреГрдкрдпрд╛ рд╕рд╣реА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдпрд╛ рдореЙрдбрд▓ рдЬрд╛рдВрдЪреЗрдВред")
        st.exception(e)
